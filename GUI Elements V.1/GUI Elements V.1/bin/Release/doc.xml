<?xml version="1.0"?>
<doc>
    <assembly>
        <name>kUnityV.1</name>
    </assembly>
    <members>
        <member name="T:klock.texture.kTexture">
            Class to handle with Textures 
        </member>
        <member name="M:klock.texture.kTexture.Clip(UnityEngine.Texture2D,UnityEngine.Rect)">
            Creates a clipped copy of the given Texture2D and returns it.
            
             @param Texture2D texture - The source texture.
             @param Rect rect         - The rectangle to show. 
        </member>
        <member name="M:klock.texture.kTexture.Tint(UnityEngine.Texture2D,UnityEngine.Color,UnityEngine.TextureFormat)">
            Creates a copy of the given Texture2D then coloring and returns it .
            
             @param Texture2D texture - The source texture.
             @param Color color           - The color to tint.
             @param TextureFormat format  - The format for the returning texture. [ ARG32 - default ] 
        </member>
        <member name="M:klock.texture.kTexture.FindTexture(System.String)">
            Search in the Unity Database Assets for the name string.
            If one found - the texture is returned.
            If no one found - null is returning.
            
            @param string name - The for the searching Texture. 
        </member>
        <member name="T:klock.io.kIO">
            Class to handle with System.IO methods.
        </member>
        <member name="M:klock.io.kIO.FileName(System.String)">
            Return the filename without extensions
            @param string file - The path to the file. 
        </member>
        <member name="M:klock.io.kIO.CreateDirectory(System.String)">
            Create a Directory on given location.
            @param string path - The location for creation. 
        </member>
        <member name="T:klock.components.kListItem">
            A GUI element for a list view.
        </member>
        <member name="M:klock.components.kListItem.Draw(UnityEngine.Rect,System.Boolean,UnityEngine.Color)">
            Drawing the component.
            @param Rect rect     - The position and size for the toogle.
            @param bool enabled  - Is the component GUI.enabeld or not.
            @param bool selected - Is the toggle on or off.  
            @param Color color   - The color for the selected Item.
            @returns bool        - Returns true if selected is true else ...
        </member>
        <member name="T:klock.io.kBinaryFormat">
            Class to read, write and convert binary byte arrays. 
        </member>
        <member name="M:klock.io.kBinaryFormat.Serialize(System.String,System.Object)">
            Converts an object in a binary byte array, and saves the result in a file.
            @param string filename - The location to save.
            @parma object objectToSerialize - The object to save.
        </member>
        <member name="M:klock.io.kBinaryFormat.Deserialize``1(System.String)">
            Open a binary byte array file. Converted to an object and return the result.
            @param string filename - The file to load.
            @returns object objectToSerialize - The converted file.
        </member>
        <member name="T:klock.drawing.kDraw">
            Class to draw GUI elements 
        </member>
        <member name="M:klock.drawing.kDraw.FillRect(UnityEngine.Rect,UnityEngine.Color)">
            Draw a filled rect at position rectangle.x and rectangle.y with the size of rectangle.width and rectangle.height.
             Using a EditorGUIUtility.whiteTexture to draw.
            @param Rect rect The rect with creation values.
            @param Color color The wanted color for the fill.
        </member>
        <member name="M:klock.drawing.kDraw.FillRect(UnityEngine.Rect,System.Single,UnityEngine.Color,UnityEngine.Color)">
            Draw a filled GUI rect with outlines ( EditorGUIUtility.whiteTexture ) at position rectangle.x and rectangle.y and with the size of rectangle.width and rectangle.height.
            Using a EditorGUIUtility.whiteTexture to draw.
            @param Rect rect The rect with creation values.
            @param Color color The wanted color for the fill.
        </member>
        <member name="M:klock.drawing.kDraw.OutRect(UnityEngine.Rect,UnityEngine.Color)">
            Draw the outlines of an GUI rect with the size and position from the parameter rectangle.
            Using a EditorGUIUtility.whiteTexture to draw a line .
            @param Rect rect The rect with creation values.
            @param Color color The wanted color for the line.
        </member>
        <member name="M:klock.drawing.kDraw.OutRect_H(UnityEngine.Rect,UnityEngine.Color)">
            Draw the outlines of an GUI rect with the size and position from the parameter rectangle.
            Using the unity handles component to draw a line.
            @param Rect rect The rect with creation values.
            @param Color color The wanted color for the line.
        </member>
        <member name="M:klock.drawing.kDraw.Line_H(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color)">
            Draw a line from Point A to Point B. Using the unity handles component.
            @param Vector2 pointA The startpoint of the line.
            @param Vector2 pointB The endpoint of the line.
            @param Color color The wanted color for the line.
        </member>
        <member name="M:klock.drawing.kDraw.HandlesColor(UnityEngine.Color)">
            Simple setup the unity handles component color 
            @param Color color The new color for the component. 
        </member>
        <member name="M:klock.drawing.kDraw.DrawTextureClipped(UnityEngine.Texture2D,UnityEngine.Rect,System.Single,System.Single)">
            Draw part of texture - WARNING: u2>u1 and v2>v1 
        </member>
        <member name="T:klock.components.kToggle">
            A GUI toogle component.
        </member>
        <member name="M:klock.components.kToggle.Draw(UnityEngine.Rect,System.Boolean,System.Boolean)">
            Drawing the component.
            @param Rect rect     - The position and size for the toogle.
            @param bool enabled  - Is the component GUI.enabeld or not.
            @param bool selected - Is the toggle on or off.  
            @returns bool        - Returns true if the toggle is on else return value is false.
        </member>
        <member name="T:klock.components.kIconButton">
            A GUI button component with a picture.
        </member>
        <member name="M:klock.components.kIconButton.Draw(UnityEngine.Rect,System.Boolean,System.Boolean,UnityEngine.Texture2D,System.String)">
            Drawing the component.
            @param Rect rect    - The position and size for the toogle.
            @param bool hover   - Is the mouseposition over the component.
            @param bool enabled - Is the component GUI.enabeld or not.  
            @param Texture2D t  - The picture to draw.
            @param string tip   - The GUIContent.ToolTip for this component.
            @returns bool       - Returns true if selected is true else ...
        </member>
        <member name="T:klock.components.kButton">
            A GUI button component.
        </member>
        <member name="F:klock.components.kButton._select">
            Color for pressing Button.
        </member>
        <member name="F:klock.components.kButton._over">
            Color for rolling over Button.
        </member>
        <member name="F:klock.components.kButton._out">
            Color for rolling out Button.
        </member>
        <member name="F:klock.components.kButton._enable">
            Color for enabled mode.
        </member>
        <member name="M:klock.components.kButton.Draw(UnityEngine.Rect,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            Drawing the component.
            @param Rect rect         - The position and size for the toogle.
            @param string labelText  - The displayed label text.
            @param bool enabled      - Is the component GUI.enabeld or not.  
            @param bool selected     - Is the button pressed or not.  
            @param string tip        - The GUIContent.ToolTip for this component.
            @param bool roller       - Has the component Mouse Roll Over/Out Events.  
            @returns bool            - Returns true if selected is true else ...
        </member>
    </members>
</doc>
